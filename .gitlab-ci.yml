stages:
  - lint
  - test
  - tag
  - release

lint code:
  stage: lint
  image: registry.yusufali.ca/containers/python:latest
  before_script:
    - apt-get update
    - apt-get install -y git
    - pip install isort black flake8
  variables:
    PROJECT_FOLDER: servc
  script:
    - isort $PROJECT_FOLDER
    - black $PROJECT_FOLDER
    - flake8 --ignore=E501,W503 $PROJECT_FOLDER
    - git status
    - git diff --exit-code $PROJECT_FOLDER

lint merge commit:
  stage: lint
  image: registry.yusufali.ca/containers/node:lts-slim
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - commitlint --from=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --verbose

lint commit:
  stage: lint
  image: registry.yusufali.ca/containers/node:lts-slim
  before_script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - commitlint --from=HEAD~2 --verbose

# unit tests:
#   stage: test
#   image: registry.yusufali.ca/containers/python:latest
#   before_script:
#     - pip install coverage
#     - pip install --no-cache-dir -r requirements.txt
#     - sleep 1m
#   services:
#     - name: registry.yusufali.ca/containers/postgres:latest
#       alias: postgres
#       variables:
#         POSTGRES_PASSWORD: postgres
#     - name: registry.yusufali.ca/containers/redis:latest
#       alias: redis
#     - name: registry.yusufali.ca/containers/rabbitmq:latest
#       alias: rabbitmq
#   variables:
#     CACHE_URL: redis://redis:6379
#     DB_URL: postgresql://postgres:postgres@postgres:5432/postgres
#     BUS_URL: amqp://rabbitmq
#   script:
#     - coverage run -m unittest tests/*.py
#     - coverage report -m --fail-under ${COVERAGE:-80}

test build package:
  stage: test
  image: registry.yusufali.ca/containers/python:latest
  before_script:
    - pip install --no-cache-dir -r requirements.txt
    - pip install build
  script:
    - python -m build

test autotag:
  stage: test
  image: registry.yusufali.ca/containers/node:current
  before_script:
    - apt-get update && apt-get install -y git
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/changelog @semantic-release/git
    - git fetch origin --tags --force
  script:
    - semantic-release --tag-format '${version}' --dry-run

build autotag:
  stage: tag
  image: registry.yusufali.ca/containers/node:current
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  before_script:
    - apt-get update && apt-get install -y git
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/changelog @semantic-release/git
    - git fetch origin --tags --force
    - git tag --delete 0.2.0
  script:
    - semantic-release --tag-format '${version}'

release:
  stage: release
  image: registry.yusufali.ca/containers/python:latest
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  before_script:
    - apt-get update && apt-get install -y git
    - pip install --no-cache-dir -r requirements.txt
    - pip install build twine
    - git fetch origin --tags --force
  script:
    - TAG=$(git tag --points-at HEAD)
    - sed -i "s/version = .*/version = \"$TAG\"/g" pyproject.toml
    - python -m build
    - python -m twine upload dist/* --non-interactive -u$PYPI_USERNAME -p$PYPI_PASSWORD
